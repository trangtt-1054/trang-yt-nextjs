{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tranthutrang/Desktop/trang-yt-nextjs/src/pages/[date]/[id].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nexport default function User(_ref) {\n  _s();\n\n  var res = _ref.res;\n  var router = useRouter();\n  console.log(res);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, res && res.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, res && res.details));\n}\n\n_s(User, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = User;\n\nUser.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var query, response, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (ctx.req) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              res: null\n            });\n\n          case 2:\n            query = ctx.query;\n            _context.next = 5;\n            return fetch(\"https://api.spacexdata.com/v3/history/\".concat(query.id));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            res = _context.sent;\n            return _context.abrupt(\"return\", {\n              res: res\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/tranthutrang/Desktop/trang-yt-nextjs/src/pages/[date]/[id].js"],"names":["useRouter","User","res","router","console","log","title","details","getInitialProps","ctx","req","query","fetch","id","response","json"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,IAAT,OAAuB;AAAA;;AAAA,MAAPC,GAAO,QAAPA,GAAO;AACpC,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,GAAG,IAAIA,GAAG,CAACI,KAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,GAAG,IAAIA,GAAG,CAACK,OAAf,CAFF,CADF;AAMD;;GATuBN,I;UACPD,S;;;KADOC,I;;AAWxBA,IAAI,CAACO,eAAL;AAAA,uEAAuB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEhBA,GAAG,CAACC,GAFY;AAAA;AAAA;AAAA;;AAAA,6CAGZ;AAAER,cAAAA,GAAG,EAAE;AAAP,aAHY;;AAAA;AAKbS,YAAAA,KALa,GAKHF,GALG,CAKbE,KALa;AAAA;AAAA,mBAMEC,KAAK,iDACeD,KAAK,CAACE,EADrB,EANP;;AAAA;AAMfC,YAAAA,QANe;AAAA;AAAA,mBASHA,QAAQ,CAACC,IAAT,EATG;;AAAA;AASfb,YAAAA,GATe;AAAA,6CAUd;AAAEA,cAAAA,GAAG,EAAHA;AAAF,aAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { useRouter } from 'next/router';\n\nexport default function User({ res }) {\n  const router = useRouter();\n  console.log(res);\n  return (\n    <div>\n      <h2>{res && res.title}</h2>\n      <p>{res && res.details}</p>\n    </div>\n  );\n}\n\nUser.getInitialProps = async (ctx) => {\n  //if we are in client side, (res & req only available in server side) instead of calling the API before navigating to next page, we JUST navigate and then we can use similar code with useState, useEffect in order to fetch data in client-side\n  if (!ctx.req) {\n    return { res: null };\n  }\n  const { query } = ctx;\n  const response = await fetch(\n    `https://api.spacexdata.com/v3/history/${query.id}`\n  );\n  const res = await response.json();\n  return { res };\n};\n"]},"metadata":{},"sourceType":"module"}