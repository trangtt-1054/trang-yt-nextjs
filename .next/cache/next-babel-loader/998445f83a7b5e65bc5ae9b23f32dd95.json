{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tran.thu.trangb/Desktop/trang-yt-nextjs/src/pages/[date]/[id].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect } from \"react\";\nexport default function User(_ref) {\n  _s();\n\n  var res = _ref.res;\n  var router = useRouter();\n\n  var _useState = useState(res),\n      item = _useState[0],\n      setItem = _useState[1];\n\n  useEffect(function () {\n    function loadData() {\n      return _loadData.apply(this, arguments);\n    }\n\n    function _loadData() {\n      _loadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, res2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://api.spacexdata.com/v3/history/\".concat(router.query.id));\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                res2 = _context.sent;\n                setItem(res2);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _loadData.apply(this, arguments);\n    }\n\n    if (!res) loadData(); //ở client side, nếu res chưa có thì gọi api trên, nếu res đã có từ lần gọi trước rồi thì skip ko gọi loadData nữa\n  }, []);\n  if (!item) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  return __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }, item && item.details);\n}\n\n_s(User, \"XI0SsC0Nt3peF5dZAFrpRX6bEPE=\", false, function () {\n  return [useRouter];\n});\n\n_c = User;\n\nUser.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var query, response, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (ctx.req) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              res: null\n            });\n\n          case 2:\n            query = ctx.query;\n            _context2.next = 5;\n            return fetch(\"https://api.spacexdata.com/v3/history/\".concat(query.id));\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return response.json();\n\n          case 8:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              res: res\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/tran.thu.trangb/Desktop/trang-yt-nextjs/src/pages/[date]/[id].tsx"],"names":["useRouter","useState","useEffect","User","res","router","item","setItem","loadData","fetch","query","id","response","json","res2","details","getInitialProps","ctx","req"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAQA,eAAe,SAASC,IAAT,OAAkC;AAAA;;AAAA,MAAlBC,GAAkB,QAAlBA,GAAkB;AAC/C,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AAD+C,kBAEvBC,QAAQ,CAACG,GAAD,CAFe;AAAA,MAExCE,IAFwC;AAAA,MAElCC,OAFkC;;AAG/CL,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCM,QADD;AAAA;AAAA;;AAAA;AAAA,2EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACyBC,KAAK,iDACeJ,MAAM,CAACK,KAAP,CAAaC,EAD5B,EAD9B;;AAAA;AACQC,gBAAAA,QADR;AAAA;AAAA,uBAI+CA,QAAQ,CAACC,IAAT,EAJ/C;;AAAA;AAIQC,gBAAAA,IAJR;AAKEP,gBAAAA,OAAO,CAACO,IAAD,CAAP;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAQd,QAAI,CAACV,GAAL,EAAUI,QAAQ,GARJ,CAQQ;AACvB,GATQ,EASN,EATM,CAAT;AAUA,MAAI,CAACF,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACX,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,IAAIA,IAAI,CAACS,OAAlB,CAAP;AACD;;GAfuBZ,I;UACPH,S;;;KADOG,I;;AAwBxBA,IAAI,CAACa,eAAL;AAAA,uEAAuB,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEhBA,GAAG,CAACC,GAFY;AAAA;AAAA;AAAA;;AAAA,8CAGZ;AAAEd,cAAAA,GAAG,EAAE;AAAP,aAHY;;AAAA;AAKbM,YAAAA,KALa,GAKHO,GALG,CAKbP,KALa;AAAA;AAAA,mBAMED,KAAK,iDACeC,KAAK,CAACC,EADrB,EANP;;AAAA;AAMfC,YAAAA,QANe;AAAA;AAAA,mBASuBA,QAAQ,CAACC,IAAT,EATvB;;AAAA;AASfT,YAAAA,GATe;AAAA,8CAUd;AAAEA,cAAAA,GAAG,EAAHA;AAAF,aAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { useRouter } from \"next/router\";\nimport { useState, useEffect } from \"react\";\nimport { HistoryEvent } from \"../../../api/HistoryEvent\";\nimport { NextPageContext } from \"next\";\n\nexport interface UserProps {\n  res: HistoryEvent | undefined;\n}\n\nexport default function User({ res }: UserProps) {\n  const router = useRouter();\n  const [item, setItem] = useState(res);\n  useEffect(() => {\n    async function loadData() {\n      const response = await fetch(\n        `https://api.spacexdata.com/v3/history/${router.query.id}`\n      );\n      const res2: HistoryEvent | undefined = await response.json();\n      setItem(res2);\n    }\n    if (!res) loadData(); //ở client side, nếu res chưa có thì gọi api trên, nếu res đã có từ lần gọi trước rồi thì skip ko gọi loadData nữa\n  }, []);\n  if (!item) return <p>Loading...</p>;\n  return <h2>{item && item.details}</h2>;\n}\n\ninterface MyNextPageContext extends NextPageContext {\n  query: {\n    date: string;\n    id: string;\n  };\n}\n\nUser.getInitialProps = async (ctx: MyNextPageContext) => {\n  //if we are in client side, (res & req only available in server side) instead of calling the API before navigating to next page, we JUST navigate and then we can use similar code with useState, useEffect in order to fetch data in client-side\n  if (!ctx.req) {\n    return { res: null };\n  }\n  const { query } = ctx;\n  const response = await fetch(\n    `https://api.spacexdata.com/v3/history/${query.id}`\n  );\n  const res: HistoryEvent | undefined = await response.json();\n  return { res };\n};\n"]},"metadata":{},"sourceType":"module"}